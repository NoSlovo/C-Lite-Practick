using System;
using System.Collections.Generic;

namespace CharpLite1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService();
            carService.AddDetail(2000,"Колодки");
            carService.AddDetail(5000, "Насос");
            carService.AddDetail(2000, "Глушитель");
            carService.AddCars();

            while (carService.Balance > 0)
            {
                carService.DisplayBalance();
                carService.Repair(); 
            }
        }
    }

    class CarService
    {
        private List<Car> _cars = new List<Car>();
        private List<Detail> _warehouse = new List<Detail>();    
        private int _priceRepair;
        private int _fine;
        private int _balance;
        
        public int Balance
        {
            get
            {
                return _balance;
            }
            private set
            {
                _balance = value;
            }
        }

        public CarService()
        {
            _balance = 20000;
            _fine = 500;
            _priceRepair = 2000;
        }

        public void AddCars()
        {
            _cars.Add(new Car("Трешина в тормазных колодках", "Колодки"));
            _cars.Add(new Car("Неисправность двигателя", "Насос"));
            _cars.Add(new Car("Проржавел глушитель", "Глушитель"));
            _cars.Add(new Car("Пробило Калесо", "Колесо"));
        }

        public void AddDetail(int prise,string detailName)
        {
            int maxDetail = 3;
            if (_warehouse.Count < maxDetail)
            {
                _warehouse.Add(new Detail(prise, detailName));
            }
            else
            {
                Console.WriteLine("Склад переполнен");
            }
        }

        private Car GetCar()
        {
            Console.WriteLine("Выберете автомобиль");
            string userInput = Console.ReadLine();

            if (int.TryParse(userInput, out int userNumber))
            {
                for (int i = 0; i < _cars.Count; i++)
                {
                    if (i == userNumber)
                    {
                        Console.WriteLine("Автомобиль передан");
                        return _cars[i];
                    }
                }
            }
            return null;
        }

        public void DisplayBalance()
        {
            Console.WriteLine($"Баланс сервиса - {_balance}");
        }

        private Detail GetDetail()
        {

            for (int i = 0; i < _warehouse.Count; i++)
            {
                Console.Write(i + " " + "-");
                _warehouse[i].DisplayDetail();
            }

            Console.WriteLine("Выберете деталь для ремонта");
            string userInput = Console.ReadLine();
            if (int.TryParse(userInput, out int userNumber))
            {
                for (int i = 0; i < _warehouse.Count; i++)
                {
                    if (i == userNumber)
                    {
                        Console.WriteLine("Деталь получена");
                        return _warehouse[i];
                    }
                }
            }
            return null;
        }

        public void DisplayAllCars()
        {
            for (int i = 0; i < _cars.Count; i++)
            {
                _cars[i].DisplayInfo();
            }
        }

        public void Repair()
        {
            Car carUser = FindСar();
            Detail detailUser = GetDetail();

            if (detailUser == null)
            {
                Console.WriteLine("Такой детали нет");
                _balance -= _fine;
            }
            else if (carUser == null)
            {
                Console.WriteLine("Такого авто нет");
            }
            else
            {
                Console.WriteLine("Приступил к работе");
                carUser.AddCarDetail(detailUser);
                Console.WriteLine("Работа выполнена");

                if (carUser.Diagnose())
                {
                    Console.WriteLine("Все хорошо");
                    _balance += detailUser.Price + _priceRepair;
                }
                else
                {
                    Console.WriteLine("Деталь не та вы понесли убыток");
                    _balance -= detailUser.Price;
                }
            }
        }

        private Car FindСar()
        {
            Console.WriteLine("Выберете автомобиль");
            DisplayAllCars();
            string userInput = Console.ReadLine();
            if (int.TryParse(userInput, out int userNumber))
            {
                for (int i = 0; i < _cars.Count; i++)
                {
                    if (userNumber == _cars[i].Id)
                    {
                        Console.WriteLine("Автомобиль найден");
                        return _cars[i];
                    }
                }
            }
            return null;
        }
    }

    class Detail
    {
        private int _ids;
        private int _price;
        private string _name;
        private int _id;
        public int Id => _id;
        public string Name => _name;
        public int Price => _price;

        public Detail(int price, string name)
        {
            _id = _ids++;
            _price = price;
            _name = name;
        }

        public void DisplayDetail()
        {
            Console.WriteLine($"Деталь - {_name}, цена - {_price}");
        }
    }

    class Car
    {
        private List<Detail> _detail = new List<Detail>();
        private static int _ids;
        private int _id;
        private string _breaking;
        private string _nameDetail;
        private bool _isBreaking;
        public int Id => _id;
        public bool IsBreaking => _isBreaking;

        public Car(string breaking, string nameDetail)
        {
            _id = _ids++;
            _breaking = breaking;
            _nameDetail = nameDetail;
            _isBreaking = true;
        }

        public void DisplayInfo()
        {
            Console.WriteLine($"Номер равен - {_id} Поломка - {_breaking},Статус поломки - {_isBreaking}");
        }

        public void AddCarDetail(Detail detail)
        {
            _detail.Add(detail);
        }

        public bool Diagnose()
        {
            Console.WriteLine("Диагностика");
            for (int i = 0; i < _detail.Count; i++)
            {
                if (_detail[i].Name == _nameDetail)
                {
                    _isBreaking = false;
                    return true;
                }
            }
            return false;
        }
    }
}
