using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GameConsoles1
{
    class Program
    {
        static void Main(string[] args)
        {
            bool isWork = true;
            War war = new War();
            PlatoonOne platoonOne = new PlatoonOne();
            PlatoonTwo platoonTwo = new PlatoonTwo();
            platoonOne.AddUnits();
            platoonTwo.AddUnits();

            while (isWork)
            {
                war.Fight(platoonOne.GetUnit(), platoonTwo.GetUnit());
                platoonOne.RamoveUnit(platoonOne.GetUnit());
                platoonTwo.RamoveUnit(platoonTwo.GetUnit());
            }
        }
    }

    class War
    {
        private List< Fighter> _winUnitsPlatoonOne = new List< Fighter>();
        private List< Fighter> _winUnitsPlatoonTwo = new List< Fighter>();

        public void Fight( Fighter unitOne,  Fighter unitTwo)
        {
            while (unitOne.IsAlive && unitTwo.IsAlive)
            {
                unitOne.ActivateSpell();
                unitTwo.ActivateSpell();
                unitOne.DisplayInfoUnit();
                unitTwo.DisplayInfoUnit();
                unitOne.TakeDamage(unitTwo.Damage);
                unitTwo.TakeDamage(unitOne.Damage);

                if (unitOne.IsAlive == false && unitTwo.IsAlive == false)
                {
                    Console.WriteLine();
                    Console.WriteLine("Ничья");
                }
                else if (unitOne.IsAlive == true && unitTwo.IsAlive == false)
                {
                    Console.WriteLine();
                    Console.WriteLine("Победил боец первого отряда");
                    Console.WriteLine();
                    _winUnitsPlatoonOne.Add(unitOne);
                }
                else if (unitOne.IsAlive == false && unitTwo.IsAlive == true)
                {
                    Console.WriteLine();
                    Console.WriteLine("Победил боец второго отряда");
                    Console.WriteLine();
                    _winUnitsPlatoonTwo.Add(unitTwo);
                }    
            }

            Console.WriteLine($"Победителей со стороны Страны 1 - {_winUnitsPlatoonOne.Count}\nПобедителей со стороны Страны 2 - {_winUnitsPlatoonTwo.Count}");
            Console.WriteLine();
        }

        public void DisplayWinner()
        {
            if (_winUnitsPlatoonOne.Count == _winUnitsPlatoonTwo.Count)
            {
                Console.WriteLine("Победителей нет");
            }
            else if (_winUnitsPlatoonOne.Count > _winUnitsPlatoonTwo.Count)
            {
                Console.WriteLine("Победил первый отряд");
            }
            else if (_winUnitsPlatoonOne.Count < _winUnitsPlatoonTwo.Count)
            {
                Console.WriteLine("Победил второй отряд");
            }
        }
    }

    class PlatoonOne
    {
       private List< Fighter> _unitsOne = new List< Fighter>();

       public void AddUnits()
       {
            _unitsOne.Add(new Sniper());
            _unitsOne.Add(new Infantryman());
            _unitsOne.Add(new Miner());
       }

        public void DisplayUnits()
        {
            Console.WriteLine("Отряд Один");
            foreach ( Fighter unit in _unitsOne)
            {
                unit.DisplayInfoUnit();
            }
        }

        public  Fighter GetUnit()
        {
            
           if (_unitsOne.Count > 0)
           {
               return _unitsOne[0];
            }
            else
            {
                Console.WriteLine("Бойци закончились");
            }

            return null;
        }

        public void RamoveUnit( Fighter unit)
        {
            _unitsOne.Remove(unit);
        }
    }

    class PlatoonTwo
    {
        private List< Fighter> _unitsTwo = new List< Fighter>();

        public void AddUnits()
        {
            _unitsTwo.Add(new Engineer());
            _unitsTwo.Add(new Medic());
            _unitsTwo.Add(new Comando());
        }

        public void DisplayUnits()
        {
            Console.WriteLine("Отряд Два");
            foreach ( Fighter unit in _unitsTwo)
            {
                unit.DisplayInfoUnit();
            }
        }

        public  Fighter GetUnit()
        {
            if (_unitsTwo.Count > 0)
            {
                return _unitsTwo[0];
            }

            return null;  
        }

        public void RamoveUnit( Fighter unit)
        {
            _unitsTwo.Remove(unit);
        }
    }



   abstract class Fighter 
    {
        protected string _name;
        protected int _health;
        protected int _damage;
        public bool IsAlive => _health > 0;
        public int Damage => _damage;
        public int Health => _health; 

        public  void TakeDamage(int damege)
        {
            _health -= damege;
        }

        public  void DisplayInfoUnit()
        {
            Console.WriteLine($"Имя-{_name} Жизни - {_health} Урон - {_damage}");
        }

        public abstract void ActivateSpell();
    }


    class Sniper : Fighter
    {

        public Sniper()
        {
            _name = "Снайпер";
            _health = 50;
            _damage = 52;
        }

        public override void ActivateSpell()
        {
            _damage = 120;
        } 
    }

    class Infantryman: Sniper
    {

        public Infantryman()
        {
            _name = "Штурмовик";
            _health = 100;
            _damage = 30;
        }

        public override void ActivateSpell()
        {
            _damage = 120;
        }
    }

    class Miner : Sniper
    {
        public Miner()
        {
            _name = "Минер";
            _health = 200;
            _damage = 1;
        }

        public override void ActivateSpell()
        {        
                _damage = 300;          
        }
    }

    class Engineer : Sniper
    {
        public Engineer()
        {
            _name = "Инженер";
            _health = 250;
            _damage = 100;
        }

        public override void ActivateSpell()
        {
            _health = 350;
            _damage = 150;
        }
    }

    class Medic : Sniper
    {
        public Medic()
        {
            _name = "Медик";
            _health = 100;
            _damage = 60;
        }

       public override void ActivateSpell()
        {
            if (_health == _health / 2)
            {
                _health = _health * 2;
            }
        }
    }

    class Comando: Sniper
    {
        public Comando()
        {
            _name = "Командо";
            _health = 500;
            _damage = 300;
        }

        public override void ActivateSpell()
        {
            _damage = _health / 3;
        }  
    }
}
